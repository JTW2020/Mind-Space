2/1/2022
9:02 AM
Charles Garman

Added decomposition rule for the phrase, "I am." under keyword: "i".
Includes three reassembly rules, 

reasmb: I see . Tell me what is on your mind right now .
reasmb: What lead to you feeling the way you do ?
reasmb: Right . Go on .

Edited a reassembly rule for decomposition rule "$ * my *" for keyword "my" so that it says,
"Lets discuss further why your (2) concerns you ." instead of,
"Lets discuss further why your (2) ."

2/5/2022
2:55 PM
Charles Garman

Gave Eliza the ability to switch contexts. When a reassembly rule begins with the phrase "switchto"
the word after that will be the name of the file to switch to, without the .txt extension. Any remaining
words will be the output displayed to the user after the switch concludes. To test this functionality,
doctor.txt was altered, as a new keyword, "depressed", was added with a priority of 50.
The decomposition rule matches any input that has the word in it, and its only reassembly rule has it
switch to depressed.txt and output the message, "We will now talk about your depression ."
depressed.txt was also created as a near exact copy to doctor.txt,
except the reassembly rule for the depressed keyword simply tells the user,
"I already know that you are depressed ." and does not trigger a context switch.
These additions can be tested by repeatedly typing, "I am depressed." into the terminal.

2/9/2022
10:04 AM
Charles Garman

Added a line near the top of the Eliza program that will cause debug information to be output to
the console unless it is commented out.

12:32 PM

Altered the Eliza program so that it will identify question marks in the user input and remove them
if parts of that input are used in the output, avoiding things like duplicate question marks.

2/10/2022
5:24 PM
Charles Garman

Added inbetween.txt as an intitial version and set Eliza to load it on startup. This context will
will be used when Eliza is trying to figure out what the overall ailment of the user is. It currently
refers to two contexts that don't exist yet, but they are just placeholders that can be changed later.

2/12/2022
4:07 PM
Charles Garman

Made a multitude of modifications to depressed.txt in order to make the responses more appropriate.
With this, the current state of depressed.txt should make a good baseline for the other three contexts,
give or take a few changes. From there manual testing should be done to modify and built on each context
to make is as robust as possible.

2/20/2022
2:47 PM
Charles Garman

Has begun altering depressed.txt to differentiate it from the more baseline version that was in the previous commit.
Decomposition rules can now be set so that their response is saved to memory if and only if no output has already been saved
to memory using the rule's keyword for the current user input. This is set by using # instead of $
Comments can be added to text files by writing a line with "comment:" at the beginning followed by whatever it is one wants to comment.
These lines will appropriately be ignored by the program.
A caret, ^, character can now be used inside decomposition rule patterns. It will match the existence of punctuation, which means a comma, semicolon, colon,
period, exclamation mark, and question mark. It will be ignored if the word at its position is not a punctuation mark, or if there are no words left in the user input.
"* my ^" would match "My", "My!", "my,", "Is this my?", etc.
Remember that decomposition rules are attempted top to bottom, so you can have a rule specifically for "* my ?" which will match "You found my?"
as well as the more general "* my ^" rule, but be sure that the more specific one is above the general one, or else the general one will always be matched first.
There is now a new reserved word to be used in assembly rules, throwkey. If a reassembly rule contains this as its first word, all subsequent words will not matter.
This word will make the program stop trying to use the keyword the reassembly rule resides in to generate output, and it will move on. Any responses saved to memory with this keyword beforehand may still be
output, however, if there are no other keys available that produce output.
Made a slight enhancement that deletes any duplicate keywords collected from user input in order to reduce wasteful/repetitive processing.
Eliza now considers periods, commas, question marks, colons, semicolons, and exclamation marks to be punctuation. What this means is that, when seen in user input, they will be separated from words and consecutive punctuation will
be eliminated. For example, "I am happy!!!!" will be seen as, "I am happy !". For the moment this also means that Eliza will only insert the user input that precedes all punctuation into its output when using
the dynamic insertion facility provided by the numbers in parenthesis, although this can be altered later if need be.
